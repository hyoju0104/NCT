<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.lec.spring.repository.ItemRepository">

    <insert id="save" flushCache="true" parameterType="com.lec.spring.domain.Item" useGeneratedKeys="true" keyColumn="id" keyProperty="id">
        INSERT INTO Item(brand_id, name, category, description, is_available, item_status, is_exist, created_at)
        VALUES (#{brand.id}, #{name}, #{category}, #{description}, #{isAvailable}, #{statusItem}, true, now());
    </insert>

    <sql id="SELECT_BASE">
        SELECT
            i.id "i_id",
            i.name "i_name",
            i.category "i_category",
            i.description "i_description",
            i.is_available "i_is_available",
            i.item_status "i_item_status",
            i.is_exist "i_is_exist",
            i.created_at "i_created_at",
            b.id "b_id",
            b.auth_id "b_auth_id",
            b.name "b_name",
            b.username "b_username",
            b.password "b_password",
            b.phone_num "b_phone_num",
            b.description "b_description",
            b.is_actived "b_is_actived"
        FROM
            Item i, Brand b
        WHERE
            i.brand_id = b.id
    </sql>

    <resultMap id="mapBrand" type="com.lec.spring.domain.Brand">
        <result column="b_id" property="id"/>
        <result column="b_auth_id" property="authId"/>
        <result column="b_name" property="name"/>
        <result column="b_username" property="username"/>
        <result column="b_password" property="password"/>
        <result column="b_phone_num" property="phoneNum"/>
        <result column="b_description" property="description"/>
        <result column="b_is_actived" property="isActived"/>
    </resultMap>

    <resultMap id="mapItem" type="com.lec.spring.domain.Item">
        <result column="i_id" property="id"/>
        <result column="i_name" property="name"/>
        <result column="i_category" property="category"/>
        <result column="i_description" property="description"/>
        <result column="i_is_available" property="isAvailable"/>
        <result column="i_item_status" property="statusItem"/>
        <result column="i_is_exist" property="isExist"/>
        <result column="i_created_at" property="createdAt"/>
        <association property="brand" resultMap="mapBrand"/>
    </resultMap>

    <!-- ID로 Item 조회 -->
    <select id="findById" resultMap="mapItem">
        <include refid="SELECT_BASE"/>
        AND i.id = #{id}
    </select>

    <!-- 상품을 사용 불가 상태로 전환 -->
    <update id="markAsUnavailable" parameterType="long" flushCache="true">
        UPDATE Item
        SET is_available = false
        WHERE id = #{id}
    </update>

    <!-- 브랜드 ID로 해당 브랜드의 모든 상품 조회 -->
    <select id="findByBrandId" resultMap="mapItem">
        <include refid="SELECT_BASE"/>
        AND i.brand_id = #{brandId}
        AND i.is_exist = true
        ORDER BY i.id DESC
    </select>

    <!-- 존재하는 모든 상품 조회 -->
    <select id="findAll" resultMap="mapItem">
        <include refid="SELECT_BASE"/>
        AND i.is_exist = true
        ORDER BY i.id DESC
    </select>

    <!-- 카테고리별 상품 필터링 -->
    <select id="findByCategory" parameterType="string" resultMap="mapItem">
        <include refid="SELECT_BASE"/>
        AND i.is_exist = true
        AND i.category = #{category}
        ORDER BY i.id DESC
    </select>

    <!-- 상품 정보 수정 -->
    <update id="update" parameterType="com.lec.spring.domain.Item" flushCache="true">
        UPDATE Item
        SET name = #{name},
            category = #{category},
            description = #{description},
            is_available = #{isAvailable},
            item_status = #{statusItem},
            is_exist = #{isExist}
        WHERE id = #{id}
    </update>

    <!-- 상품 삭제 (is_exist → false 처리) -->
    <update id="markAsNotExist" parameterType="com.lec.spring.domain.Item" flushCache="true">
        UPDATE Item
        SET
            is_exist = false
        WHERE id = #{id}
    </update>

    <!-- 상품의 사용 가능 여부 지정 -->
    <update id="setAvailable" parameterType="map">
        UPDATE Item
        SET is_available = #{isAvailable}
        WHERE id = #{itemId}
    </update>

    <!-- 특정 브랜드의 모든 상품을 비활성화 상태로 전환 -->
    <update id="markAllItemsAsNotExistByBrandId" parameterType="com.lec.spring.domain.Item" flushCache="true">
        UPDATE Item
        SET is_exist = false
        WHERE brand_id = #{brandId}
    </update>

</mapper>